import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import datetime
from datetime import timedelta
from helpers.channel_helpers import start_add_channel, start_delete_channel
from utils.db import save_timer_to_db, delete_timer_from_db, check_timer_in_db

# Helper function to extract channel name
def extract_channel_name(text):
    text = text.strip()
    if text.startswith('@'):
        return text
    if text.startswith('https://t.me/'):
        match = re.match(r'https://t\.me/(\w+)', text)
        if match:
            return "@" + match.group(1)
    return None

# Start function to display the main menu
async def start(update: Update, context: CallbackContext) -> None:
    message = update.message if update.message else update.callback_query.message
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü§î", callback_data="about_bot")],
        [InlineKeyboardButton("–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? üí°", callback_data="help_menu")],
        [InlineKeyboardButton("–¢–∞–π–º–µ—Ä –¥–ª—è —Å–∞–º–º–∞—Ä–∏ ‚è∞", callback_data="set_timer")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚ùå", callback_data="remove_timer")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª üìù", callback_data='channel_add_start')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª üóëÔ∏è", callback_data='channel_delete_start')],
        [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ ‚úçÔ∏è", callback_data="summarize_text_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
    logging.info("Displayed start menu.")

# Handle menu selection from callback queries
async def handle_menu_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logging.info(f"Menu selection: {data}")

    await query.answer()

    if data == "about_bot":
        await query.edit_message_text(text="–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏–∑ –ø–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª—å GPT-3.5. "
                                           "–ë–æ–ª—å—à–µ –æ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –º–µ–Ω—é.")
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=reply_markup)
    elif data == "set_timer":
        await new_summary_timer(update, context)
    elif data == "remove_timer":
        await remove_timer(update, context)
    elif data == "summarize_text_start":
        await start_summarize_text(update, context)
    elif data == "back_to_main":
        await start(update, context)
    elif data.startswith("new_set"):
        await handle_default_timer_setting(update, context)
    elif data == "channel_add_start":
        await start_add_channel(update, context)
    elif data == "channel_delete_start":
        await start_delete_channel(update, context)
    elif data == "help_menu":
        await help_menu(update, context)
    elif data == "confirm_remove_timer":
        await confirm_remove_timer(update, context)
    elif data == 'cancel_remove_timer':
        await cancel_remove_timer(update, context)

# Display timer selection menu
async def new_summary_timer(update: Update, context: CallbackContext):
    message = update.message if update.message else update.callback_query.message
    keyboard = [
        [InlineKeyboardButton("üïò 9:00", callback_data="new_set_09:00"),
         InlineKeyboardButton("üïõ 12:00", callback_data="new_set_12:00")],
        [InlineKeyboardButton("üïï 18:00", callback_data="new_set_18:00"),
         InlineKeyboardButton("üïò 21:00", callback_data="new_set_21:00")],
        [InlineKeyboardButton("–Ø —Ö–æ—á—É –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!", callback_data="new_set_custom_time")],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text('–ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Å–≤–æ–∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ú–æ—Å–∫–≤—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:', reply_markup=reply_markup)
    logging.info("Displayed timer selection menu.")

# Handle setting default timer
async def handle_default_timer_setting(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logging.info(f"Default timer setting: {data}")

    await query.answer()

    if data == "new_set_custom_time":
        await query.edit_message_text(
            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú", —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ.'
        )
    else:
        _, _, time = data.split("_")
        timer = datetime.datetime.strptime(time, '%H:%M')
        timer = timer - timedelta(hours=3)
        timer = timer.time()
        cron_expression = f"{timer.minute} {timer.hour} * * *"
        chat_id = query.message.chat_id

        save_timer_to_db(chat_id, timer, 'predefined', cron_expression)

        await query.edit_message_text(text=f"–°–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º–º–∞—Ä–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {time} –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        logging.info(f"Timer set for user {chat_id} at {time}.")
        await start(update, context)

# Handle custom timer input
async def handle_custom_timer_input(update: Update, context: CallbackContext):
    message = update.message if update.message else update.callback_query.message
    custom_time = message.text.strip()
    try:
        timer = datetime.datetime.strptime(custom_time, '%H:%M')
        timer = timer - timedelta(hours=3)
        timer = timer.time()
        cron_expression = f"{timer.minute} {timer.hour} * * *"
        chat_id = update.effective_chat.id

        save_timer_to_db(chat_id, timer, 'custom', cron_expression)

        await message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º–º–∞—Ä–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {custom_time} –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
        logging.info(f"Custom timer set for user {chat_id} at {custom_time}.")
        await start(update, context)
    except ValueError:
        keyboard = [
            [InlineKeyboardButton("–ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º ‚è∞", callback_data="set_timer")],
            [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú" (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).',
            reply_markup=reply_markup
        )

# Handle timer removal
async def remove_timer(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat_id

    if check_timer_in_db(chat_id):
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data="confirm_remove_timer")],
            [InlineKeyboardButton("–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel_remove_timer")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä. –í—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?", reply_markup=reply_markup)
    else:
        keyboard = [
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="set_timer")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.", reply_markup=reply_markup)

# Confirm timer removal
async def confirm_remove_timer(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat_id

    delete_timer_from_db(chat_id)
    await query.edit_message_text(text="–í–∞—à —Ç–∞–π–º–µ—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    logging.info(f"Timer removed for user {chat_id}.")
    await start(update, context)

# Cancel timer removal
async def cancel_remove_timer(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.edit_message_text(text="–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await start(update, context)

# Status command handler
async def status(update: Update, context: CallbackContext) -> None:
    message = update.message if update.message else update.callback_query.message
    await message.reply_text('OK')

async def help_menu(update: Update, context: CallbackContext):
    message = update.message if update.message else update.callback_query.message
    help_text = (
        "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ @channelname –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ç–∞–π–º–µ—Ä—É\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'https://t.me/channelname/postID' –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é:\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü§î - –ù–∞ —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è.\n"
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? üí° - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–¢–∞–π–º–µ—Ä –¥–ª—è —Å–∞–º–º–∞—Ä–∏ ‚è∞ - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚ùå - –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä.\n"
        "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª üìù - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏.\n"
        "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
        "–°–¥–µ–ª–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ ‚úçÔ∏è - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ—Å—Ç–∞.\n"
        "–°–ø–∏—Å–æ–∫ –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
        "/delete_channel <–∫–∞–Ω–∞–ª> - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ –ø–æ —Ç–∞–π–º–µ—Ä\n"
        "/remove_timer - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä\n"
        "/summarize_text <—Ç–µ–∫—Å—Ç> - –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ —Ç–µ–∫—Å—Ç–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.reply_text(help_text)
    logging.info("Displayed help menu.")


# Start summarize text handler
async def start_summarize_text(update: Update, context: CallbackContext):
    message = update.message if update.message else update.callback_query.message
    text = "–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /summarize_text '–í–∞—à —Ç–µ–∫—Å—Ç' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º."
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text(text, reply_markup=reply_markup)
    logging.info("Displayed summarize text instructions.")
